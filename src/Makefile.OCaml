# Unison file synchronizer: src/Makefile.OCaml
# See ../LICENSE for terms.

# IMPORTANT!
#
# This file is portable and compatible with GNU Make, BSD make, Solaris
# (d)make and NMAKE. Do not make any changes in this file unless you are
# certain that the changes do not break this portability.

all: tui guimaybe macuimaybe fsmonitor
.PHONY: all # This .PHONY definition must come after the first target,
            # so that make implementations which don't support .PHONY
            # don't treat it as the default target (which in turn
            # would cause _all_ targets to be made).
.PHONY: clean

# NAME, VERSION, and MAJORVERSION
include Makefile.ProjectInfo

# Automatically generated configuration
include Makefile.cfg

####################################################################
#         Makefile rules for compiling ocaml programs              #
####################################################################

####################################################################
### Try to automatically guess UI style

.PHONY: guimaybe
guimaybe:

.PHONY: macuimaybe
macuimaybe:

####################################################################
### Default parameters

INCLFLAGS = -I lwt -I ubase -I system -I system/$(SYSTEM) -I lwt/$(SYSTEM)
DEP_INCLFLAGS = -I lwt -I ubase -I system \
                -I fsmonitor -I fsmonitor/inotify -I fsmonitor/solaris -I fsmonitor/windows

ubase/projectInfo.ml: Makefile.ProjectInfo
	ocaml make_tools.ml projectinfo NAME="$(NAME)" VERSION="$(VERSION)" MAJORVERSION="$(MAJORVERSION)" > $@

clean::
	cd ubase && $(RM) projectInfo.ml

####################################################################
### Unison objects and libraries

# OCaml objects for the bytecode version
# File extensions will be substituted for the native code version

OCAMLOBJS = \
          ubase/umarshal.cmo \
          ubase/rx.cmo \
          \
          unicode_tables.cmo unicode.cmo bytearray.cmo \
          system/system_generic.cmo $(WINOBJS) \
          system/$(SYSTEM)/system_impl.cmo \
          system.cmo \
          \
          ubase/projectInfo.cmo ubase/myMap.cmo ubase/safelist.cmo \
          ubase/util.cmo ubase/uarg.cmo \
          ubase/prefs.cmo ubase/trace.cmo ubase/proplist.cmo \
          \
          lwt/pqueue.cmo lwt/lwt.cmo lwt/lwt_util.cmo \
          lwt/$(SYSTEM)/lwt_unix_impl.cmo lwt/lwt_unix.cmo \
          \
          features.cmo uutil.cmo case.cmo pred.cmo terminal.cmo \
          fileutil.cmo name.cmo path.cmo fspath.cmo fs.cmo fingerprint.cmo \
          abort.cmo osx.cmo fswatch.cmo propsdata.cmo \
          props.cmo fileinfo.cmo os.cmo lock.cmo clroot.cmo common.cmo \
          tree.cmo checksum.cmo transfer.cmo xferhint.cmo \
          remote.cmo external.cmo negotiate.cmo globals.cmo fswatchold.cmo \
          fpcache.cmo update.cmo copy.cmo stasher.cmo \
          files.cmo sortri.cmo recon.cmo transport.cmo \
          strings.cmo uicommon.cmo uitext.cmo test.cmo \
          main.cmo

# OCaml libraries for the bytecode version
# File extensions will be substituted for the native code version
OCAMLLIBS = unix.cma str.cma
OCAMLINCLUDES = -I +unix -I +str

# C objects for both bytecode and native versions
COBJS = osxsupport$(OBJ_EXT) pty$(OBJ_EXT) bytearray_stubs$(OBJ_EXT) \
        hash_compat$(OBJ_EXT) props_xattr$(OBJ_EXT) props_acl$(OBJ_EXT) \
        copy_stubs$(OBJ_EXT) $(WINCOBJS)

####################################################################
### User Interface setup

## Text UI
OCAMLOBJS_TUI = linktext.cmo

## Mac UI
OCAMLOBJS_MAC = uimacbridge.cmo
OCAMLLIBS_MAC = threads.cma
CAMLFLAGS_MAC = -I +threads

## Graphic UI
OCAMLOBJS_GUI = pixmaps.cmo uigtk3.cmo linkgtk3.cmo
OCAMLLIBS_GUI = lablgtk3.cma cairo.cma

####################################################################
### Unison executables

NAME_GUI = $(NAME)-gui

.PHONY: buildexecutable
buildexecutable:

.PHONY: tui
tui: buildexecutable $(NAME)$(EXEC_EXT)

.PHONY: gui
gui: buildexecutable $(NAME_GUI)$(EXEC_EXT)

.PHONY: macui
macui: buildexecutable macexecutable

.PHONY: macexecutable
macexecutable: $(NAME)-blob.o
	cd uimac && $(MAKE) macexecutable VERSION="$(VERSION)" OCAMLLIBDIR="$(OCAMLLIBDIR)" XCODEFLAGS="$(XCODEFLAGS)"

clean::
	-cd uimac && $(MAKE) clean

####################################################################
### Filesystem monitoring

NAME_FSM = $(NAME)-fsmonitor

.PHONY: fsmonitor
fsmonitor:

.PHONY: fsmonitorexecutable
fsmonitorexecutable: buildexecutable $(NAME_FSM)$(EXEC_EXT)

CAMLFLAGS_FSM = -I fsmonitor -I ./$(FSMDIR)

####################################################################
### Dependencies

# Include an automatically generated list of dependencies
include .depend
# Additional dependencies depending on the system
system.cmo fspath.cmo fs.cmo: system/$(SYSTEM)/system_impl.cmo
system.cmx fspath.cmx fs.cmx: system/$(SYSTEM)/system_impl.cmx
lwt/lwt_unix.cmo: lwt/$(SYSTEM)/lwt_unix_impl.cmo
lwt/lwt_unix.cmx: lwt/$(SYSTEM)/lwt_unix_impl.cmx
lwt/win/lwt_win.cmo: lwt/win/lwt_unix_impl.cmo system/system_win.cmo
lwt/win/lwt_win.cmx: lwt/win/lwt_unix_impl.cmx system/system_win.cmx

.PHONY: depend
depend:
	ocamlc -depend $(DEP_INCLFLAGS) *.mli *.ml */*.ml */*.mli */*/*.ml */*/*.mli > .depend

.PHONY: dependgraph
dependgraph: depend
	echo 'digraph G {' > .depend.dot.tmp
	echo '{ rank = same; "Fileinfo"; "Props"; "Fspath"; "Os"; "Path"; }'\
           >>.depend.dot.tmp
	echo '{ rank = same; "Uitext"; "Uigtk"; }'>>.depend.dot.tmp
	echo '{ rank = same; "Recon"; "Update"; "Transport"; "Files"; }'\
           >>.depend.dot.tmp
	echo '{ rank = same; "Tree"; "Safelist"; }'>>.depend.dot.tmp
	echo '{ rank = same; "Uarg"; "Prefs"; }'>>.depend.dot.tmp
	echo 'Attempting to use ocamldot and dot to produce a dependency graph:'
	-ocamldot .depend | tail -n +2 >> .depend.dot.tmp
	-dot -Tps -o DEPENDENCIES.ps .depend.dot.tmp

####################################################################
### Compilation

win32rc/unison.res: win32rc/unison.rc win32rc/U.ico
	rc win32rc/unison.rc

win32rc/unison.res.lib: win32rc/unison.rc win32rc/U.ico
	$(WINDRES) win32rc/unison.rc win32rc/unison.res
	$(WINDRES) win32rc/unison.res win32rc/unison.res.lib

# Context-specific variables, enabling target local variables
CAMLFLAGS_X = $(CAMLFLAGS) $(OCAMLINCLUDES) $(CAMLFLAGS_GUI_X) $(CAMLFLAGS_FSM_X) $(CAMLFLAGS_MAC_X)
CAMLCFLAGS_X = $(CAMLCFLAGS) $(CAMLCFLAGS_FSM_X)

.SUFFIXES:
.SUFFIXES: .mli .cmi .ml .cmo .cmx .c .o .obj

.mli.cmi:
	@echo "$(CAMLC): $< ---> $@"
	$(CAMLC) $(CAMLFLAGS_X) -c $(CWD)/$<

.ml.cmo:
	@echo "$(OCAMLC): $< ---> $@"
	$(OCAMLC) $(CAMLFLAGS_X) -c $(CWD)/$<

.ml.cmx:
	@echo "$(OCAMLOPT): $< ---> $@"
	$(OCAMLOPT) $(CAMLFLAGS_X) -c $(CWD)/$<

.c$(OBJ_EXT):
	@echo "$(CAMLC): $< ---> $@"
	$(CAMLC) $(CAMLFLAGS_X) $(CAMLCFLAGS_X) -ccopt $(OUTPUT_SEL)$(CWD)/$@ -c $(CWD)/$<

# The second part of configuration must be included here because rule lines
# are expanded at parsing, so we need all variables to be defined by then.
include Makefile2.cfg

$(NAME)$(EXEC_EXT): $(CAMLOBJS) $(CAMLOBJS_TUI) $(COBJS)
	@echo Linking $@
	$(CAMLC) -verbose $(CAMLFLAGS_X) $(CAMLLDFLAGS) -o $@ $(CAMLLIBS) $(ALL__SRC) $(CLIBS)

$(NAME_GUI)$(EXEC_EXT): $(CAMLOBJS) $(CAMLOBJS_GUI) $(COBJS)
	@echo Linking $@
	$(CAMLC) -verbose $(CAMLFLAGS_X) $(CAMLLDFLAGS) $(CAMLLDFLAGS_GUI) -o $@ $(CAMLLIBS) $(CAMLLIBS_GUI) $(ALL__SRC) $(CLIBS)

$(NAME_FSM)$(EXEC_EXT): $(CAMLOBJS_FSM) $(FSMCOBJS)
	@echo Linking $@
	$(CAMLC) -verbose $(CAMLFLAGS_X) $(CAMLLDFLAGS) -o $@ $(CAMLLIBS_FSM) $(ALL__SRC) $(CLIBS) $(CLIBS_FSM)

# Unfortunately -output-obj does not put .o files into the output, only .cmx
# files, so we have to use $(LD) to take care of COBJS.
# [2023-07] The limitations of -output-obj have been overcome by a new option
# -output-complete-obj, available since OCaml 4.02.2. Still, this option can't
# be used here because there is a bug which breaks linking on macOS when using
# threads (needed by uimacbridge): https://github.com/ocaml/ocaml/issues/7933
$(NAME)-blob.o: $(CAMLOBJS) $(CAMLOBJS_MAC) $(COBJS)
	@echo Linking $@
	$(CAMLC) -dstartup -output-obj -verbose -cclib -keep_private_externs $(CAMLFLAGS_X) -o u-b.o $(CAMLLDFLAGS) $(CAMLLIBS) $(CAMLLIBS_MAC) $(CLIBS) $(CAMLOBJS) $(CAMLOBJS_MAC)
	$(LD) -r -keep_private_externs -o $@ u-b.o $(COBJS)
	$(RM) u-b.o

####################################################################
### Documentation

.PHONY: manpage
manpage:

.PHONY: manpagefile
manpagefile: ../man/$(NAME).1

../man/$(NAME).1: ../man/$(NAME).1.in opt_short.tmp opt_full.tmp
	sed -e '/@OPTIONS_SHORT@/r ./opt_short.tmp' \
		-e '/@OPTIONS_SHORT@/d' \
		-e '/@OPTIONS_FULL@/r ./opt_full.tmp' \
		-e '/@OPTIONS_FULL@/d' ../man/$(NAME).1.in > $@

# Listing of preferences
opt_short.tmp: $(NAME)$(EXEC_EXT)
	./$(NAME)$(EXEC_EXT) -prefsman short > $@

opt_full.tmp: $(NAME)$(EXEC_EXT)
	./$(NAME)$(EXEC_EXT) -prefsman full > $@

clean::
	cd ../man && $(RM) *.tmp $(NAME).1

.PHONY: docs
docs:

.PHONY: docfiles
docfiles: manpagefile
	cd ../doc && $(MAKE) all

####################################################################
### Misc

RM_FILES = $(RM) *.cmi *.cmo *.cmx *.cma *.cmxa *.o *.obj *.lib *.exp *~ .*~ *.bak *.tmp

clean::
	-$(RM) Makefile.cfg Makefile2.cfg _mk.cfg
	-$(RM) $(NAME) $(NAME).exe
	-$(RM) $(NAME_GUI) $(NAME_GUI).exe
	-$(RM) $(NAME_FSM) $(NAME_FSM).exe
	-$(RM) $(NAME)-blob.o
	-$(RM) TAGS tags
	-$(RM) core gmon.out
	-$(RM) *.tmp *.bak?.tmp .*.bak?.tmp
	-$(RM) .depend.dot.tmp DEPENDENCIES.ps
	-(cd win32rc && $(RM) unison.res unison.res.lib)
	-$(RM_FILES)
	-(cd system && $(RM_FILES))
	-(cd system/generic && $(RM_FILES))
	-(cd system/win && $(RM_FILES))
	-(cd fsmonitor && $(RM_FILES))
	-(cd fsmonitor/../$(FSMDIR) && $(RM_FILES))
	-(cd ubase && $(RM_FILES))
	-(cd lwt && $(RM_FILES))
	-(cd lwt/generic && $(RM_FILES))
	-(cd lwt/win && $(RM_FILES))

.PHONY: paths
paths:
	@echo PATH = '$(PATH)'
	@echo OCAMLLIBDIR = '$(OCAMLLIBDIR)'
